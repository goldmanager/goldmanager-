plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.2'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '4.0.4'
	id 'org.cyclonedx.bom' version '2.0.0'
}

import java.util.Properties

group = 'de.goldmanager'
version = '1.0.0'
compileJava.options.encoding = 'UTF-8'

task generateVersionProperties {
    def outputDir = file("$buildDir/generated-resources")
    def versionFile = new File(outputDir, "version.properties")

    outputs.file(versionFile)
    doLast {
        outputDir.mkdirs()
        def properties = new Properties()
        properties.setProperty('version', project.version.toString())
        versionFile.withWriter { writer ->
            properties.store(writer, null)
        }
      
    }
}
sourceSets.main.resources.srcDir("$buildDir/generated-resources")
tasks.named("processResources").configure {
    dependsOn generateVersionProperties
}

tasks.named("generateVersionProperties").configure {
    outputs.dir("$buildDir/generated-resources")
}

compileJava.dependsOn generateVersionProperties

tasks.named("classes").configure {
    dependsOn generateVersionProperties
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

}


bootBuildImage {
    imageName = "${buildDockerImageName}:${project.version}"
   
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-config'
    implementation 'org.springframework.security:spring-security-web'

    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.session:spring-session-core'
    implementation 'commons-codec:commons-codec:1.17.2'
    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    implementation 'com.github.zafarkhaja:java-semver:0.10.2'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.80'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.80'
    
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.mockito:mockito-core'

    testImplementation 'net.bytebuddy:byte-buddy'
    testImplementation 'net.bytebuddy:byte-buddy-agent'
    testImplementation 'com.h2database:h2'
    
    
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.named('test') {
 	onlyIf { !project.hasProperty('skipTests') }
	outputs.dir snippetsDir
	useJUnitPlatform()
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}
